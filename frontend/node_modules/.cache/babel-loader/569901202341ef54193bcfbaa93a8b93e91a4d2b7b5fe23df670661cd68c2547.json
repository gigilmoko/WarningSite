{"ast":null,"code":"var _jsxFileName = \"C:\\\\earthquake\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [earthquakes, setEarthquakes] = useState([]);\n  const currentDate = new Date().toISOString().split('T')[0]; // Get current date in \"YYYY-MM-DD\" format\n\n  useEffect(() => {\n    // Function to fetch earthquake data\n    const fetchEarthquakeData = async () => {\n      try {\n        // Make a GET request to the USGS API\n        const response = await axios.get(`https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=2024-01-01&endtime=${currentDate}&minmagnitude=4.5`);\n\n        // Extract earthquake data from the response\n        const allEarthquakes = response.data.features;\n\n        // Filter earthquakes to include only those in the Philippines\n        const philippinesEarthquakes = allEarthquakes.filter(earthquake => {\n          // Check if the 'place' property is not null before applying toLowerCase\n          return earthquake.properties.place && earthquake.properties.place.toLowerCase().includes('philippines');\n        });\n\n        // Log the earthquake data to the console\n        console.log('Earthquake Data:', philippinesEarthquakes);\n\n        // Update the state with the filtered earthquake data\n        setEarthquakes(philippinesEarthquakes);\n      } catch (error) {\n        console.error('Error fetching earthquake data:', error.message);\n      }\n    };\n\n    // Call the function to fetch earthquake data when the component mounts\n    fetchEarthquakeData();\n\n    // Set up interval for automatic refresh every 10 seconds\n    const refreshInterval = setInterval(() => {\n      fetchEarthquakeData();\n    }, 10000);\n\n    // Cleanup interval to avoid memory leaks\n    return () => clearInterval(refreshInterval);\n  }, [currentDate]); // Include currentDate as a dependency\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Earthquake Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: earthquakes.map(earthquake => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Magnitude \", earthquake.properties.mag, \" earthquake at\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n              href: earthquake.properties.url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: earthquake.properties.place\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this), ' ', \"on\", ' ', new Date(earthquake.properties.time).toLocaleString()]\n          }, earthquake.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jDQ3H2BZpIZc2ViLUlFMIWXhpYk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","logo","jsxDEV","_jsxDEV","App","_s","earthquakes","setEarthquakes","currentDate","Date","toISOString","split","fetchEarthquakeData","response","get","allEarthquakes","data","features","philippinesEarthquakes","filter","earthquake","properties","place","toLowerCase","includes","console","log","error","message","refreshInterval","setInterval","clearInterval","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","map","mag","url","time","toLocaleString","id","_c","$RefreshReg$"],"sources":["C:/earthquake/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [earthquakes, setEarthquakes] = useState([]);\n  const currentDate = new Date().toISOString().split('T')[0]; // Get current date in \"YYYY-MM-DD\" format\n\n  useEffect(() => {\n    // Function to fetch earthquake data\n    const fetchEarthquakeData = async () => {\n      try {\n        // Make a GET request to the USGS API\n        const response = await axios.get(`https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=2024-01-01&endtime=${currentDate}&minmagnitude=4.5`);\n  \n        // Extract earthquake data from the response\n        const allEarthquakes = response.data.features;\n  \n        // Filter earthquakes to include only those in the Philippines\n        const philippinesEarthquakes = allEarthquakes.filter((earthquake) => {\n          // Check if the 'place' property is not null before applying toLowerCase\n          return earthquake.properties.place && earthquake.properties.place.toLowerCase().includes('philippines');\n        });\n  \n        // Log the earthquake data to the console\n        console.log('Earthquake Data:', philippinesEarthquakes);\n  \n        // Update the state with the filtered earthquake data\n        setEarthquakes(philippinesEarthquakes);\n      } catch (error) {\n        console.error('Error fetching earthquake data:', error.message);\n      }\n    };\n  \n    // Call the function to fetch earthquake data when the component mounts\n    fetchEarthquakeData();\n\n    // Set up interval for automatic refresh every 10 seconds\n    const refreshInterval = setInterval(() => {\n      fetchEarthquakeData();\n    }, 10000);\n\n    // Cleanup interval to avoid memory leaks\n    return () => clearInterval(refreshInterval);\n  }, [currentDate]); // Include currentDate as a dependency\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n\n        {/* Display earthquake data */}\n        <div>\n          <h2>Earthquake Data</h2>\n          <ul>\n            {earthquakes.map((earthquake) => (\n              <li key={earthquake.id}>\n                Magnitude {earthquake.properties.mag} earthquake at{' '}\n                <a\n                  href={earthquake.properties.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {earthquake.properties.place}\n                </a>{' '}\n                on{' '}\n                {new Date(earthquake.properties.time).toLocaleString()}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}