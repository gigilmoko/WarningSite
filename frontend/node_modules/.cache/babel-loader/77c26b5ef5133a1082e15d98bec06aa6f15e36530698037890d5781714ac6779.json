{"ast":null,"code":"var _jsxFileName = \"C:\\\\earthquake\\\\frontend\\\\src\\\\earthquake.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BASE_URL } from './apiConfig'; // Import the BASE_URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [earthquakes, setEarthquakes] = useState([]);\n  const currentDate = new Date().toISOString().split('T')[0]; // Get current date in \"YYYY-MM-DD\" format\n\n  useEffect(() => {\n    // Function to fetch earthquake data\n    const fetchEarthquakeData = async () => {\n      try {\n        // Make a GET request to the USGS API\n        const response = await axios.get(`https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=2024-01-01&endtime=${currentDate}&minmagnitude=4.5`);\n\n        // Extract earthquake data from the response\n        const allEarthquakes = response.data.features;\n\n        // Filter earthquakes to include only those in the Philippines\n        const philippinesEarthquakes = allEarthquakes.filter(earthquake => {\n          // Check if the 'place' property is not null before applying toLowerCase\n          return earthquake.properties.place && earthquake.properties.place.toLowerCase().includes('philippines');\n        });\n\n        // Log the earthquake data to the console\n        console.log('Earthquake Data:', philippinesEarthquakes);\n\n        // Update the state with the filtered earthquake data\n        setEarthquakes(philippinesEarthquakes);\n      } catch (error) {\n        console.error('Error fetching earthquake data:', error.message);\n      }\n    };\n\n    // Call the function to fetch earthquake data when the component mounts\n    fetchEarthquakeData();\n\n    // Set up interval for automatic refresh every 10 seconds\n    const refreshInterval = setInterval(() => {\n      fetchEarthquakeData();\n    }, 10000);\n\n    // Cleanup interval to avoid memory leaks\n    return () => clearInterval(refreshInterval);\n  }, [currentDate]); // Include currentDate as a dependency\n\n  // Function to send earthquake data to the backend server for saving to MongoDB\n  const saveEarthquakeDataToMongoDB = async () => {\n    try {\n      // Make a POST request to your backend server using the BASE_URL\n      await axios.post(`${BASE_URL}/api/data`, earthquakes);\n      console.log('Earthquake data saved to MongoDB');\n    } catch (error) {\n      console.error('Error saving earthquake data to MongoDB:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Notification Earthquake Data in Philippines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Magnitude\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: earthquakes.map(earthquake => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: earthquake.properties.mag\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: earthquake.properties.url,\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: earthquake.properties.place\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: new Date(earthquake.properties.time).toLocaleString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this)]\n            }, earthquake.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jDQ3H2BZpIZc2ViLUlFMIWXhpYk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","logo","BASE_URL","jsxDEV","_jsxDEV","App","_s","earthquakes","setEarthquakes","currentDate","Date","toISOString","split","fetchEarthquakeData","response","get","allEarthquakes","data","features","philippinesEarthquakes","filter","earthquake","properties","place","toLowerCase","includes","console","log","error","message","refreshInterval","setInterval","clearInterval","saveEarthquakeDataToMongoDB","post","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","mag","href","url","target","rel","time","toLocaleString","id","_c","$RefreshReg$"],"sources":["C:/earthquake/frontend/src/earthquake.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { BASE_URL } from './apiConfig'; // Import the BASE_URL\r\n\r\nfunction App() {\r\n  const [earthquakes, setEarthquakes] = useState([]);\r\n  const currentDate = new Date().toISOString().split('T')[0]; // Get current date in \"YYYY-MM-DD\" format\r\n\r\n  useEffect(() => {\r\n    // Function to fetch earthquake data\r\n    const fetchEarthquakeData = async () => {\r\n      try {\r\n        // Make a GET request to the USGS API\r\n        const response = await axios.get(`https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=2024-01-01&endtime=${currentDate}&minmagnitude=4.5`);\r\n  \r\n        // Extract earthquake data from the response\r\n        const allEarthquakes = response.data.features;\r\n  \r\n        // Filter earthquakes to include only those in the Philippines\r\n        const philippinesEarthquakes = allEarthquakes.filter((earthquake) => {\r\n          // Check if the 'place' property is not null before applying toLowerCase\r\n          return earthquake.properties.place && earthquake.properties.place.toLowerCase().includes('philippines');\r\n        });\r\n  \r\n        // Log the earthquake data to the console\r\n        console.log('Earthquake Data:', philippinesEarthquakes);\r\n  \r\n        // Update the state with the filtered earthquake data\r\n        setEarthquakes(philippinesEarthquakes);\r\n      } catch (error) {\r\n        console.error('Error fetching earthquake data:', error.message);\r\n      }\r\n    };\r\n  \r\n    // Call the function to fetch earthquake data when the component mounts\r\n    fetchEarthquakeData();\r\n\r\n    // Set up interval for automatic refresh every 10 seconds\r\n    const refreshInterval = setInterval(() => {\r\n      fetchEarthquakeData();\r\n    }, 10000);\r\n\r\n    // Cleanup interval to avoid memory leaks\r\n    return () => clearInterval(refreshInterval);\r\n  }, [currentDate]); // Include currentDate as a dependency\r\n\r\n  // Function to send earthquake data to the backend server for saving to MongoDB\r\n  const saveEarthquakeDataToMongoDB = async () => {\r\n    try {\r\n      // Make a POST request to your backend server using the BASE_URL\r\n      await axios.post(`${BASE_URL}/api/data`, earthquakes);\r\n      console.log('Earthquake data saved to MongoDB');\r\n    } catch (error) {\r\n      console.error('Error saving earthquake data to MongoDB:', error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a> */}\r\n\r\n        {/* Display earthquake data in a table */}\r\n        <div className=\"table-container\">\r\n          <h1>Notification Earthquake Data in Philippines</h1>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Magnitude</th>\r\n                <th>Location</th>\r\n                <th>Date</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {earthquakes.map((earthquake) => (\r\n                <tr key={earthquake.id}>\r\n                  <td>{earthquake.properties.mag}</td>\r\n                  <td>\r\n                    <a\r\n                      href={earthquake.properties.url}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      {earthquake.properties.place}\r\n                    </a>\r\n                  </td>\r\n                  <td>{new Date(earthquake.properties.time).toLocaleString()}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {/* Button to store fetched data to database */}\r\n        {/* <button onClick={saveEarthquakeDataToMongoDB}>Store Data in Database</button> */}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}